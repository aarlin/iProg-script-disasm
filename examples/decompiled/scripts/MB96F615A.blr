Menu
    Read All,Read_All,0,F3
    Write All,Write_All,1,F4
    Erase All,Erase_All,4,F7
EndMenu


Editor
{
 (Caption="FLASH";size=164352;mode=8;bytes=16)
}

Window(caption=""; width=250; height=80; align=v)
{
    List(caption="Тактовая частота, МГц:"; name=list_1923; left=140; top=65; width=50; value=0; items="4MHz","5MHz","8MHz")
    List(caption="Напряжение питания, В:"; name=list_1924; left=140; top=100; width=50; value=1; items="3.3","5")
}

$HOST

#define MEM_SIZE	164352


byte kernel_0CEB[] = {
	0x60, 0x02, 0x00, 0x00, 0x88, 0x5B, 0x02, 0x66, 0x0A, 0x00, 0x24, 0x00, 0xD0, 0x6F, 0x13, 0x6F,
	0x10, 0x4A, 0xF4, 0x63, 0x47, 0xAC, 0xF4, 0x63, 0x7B, 0x24, 0x64, 0xAC, 0x63, 0x5A, 0x02, 0x66,
	0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02,
	0x00, 0x6F, 0x15, 0xA8, 0x70, 0x17, 0x00, 0x00, 0x00, 0x00, 0x76, 0xE0, 0xF9, 0x73, 0xDF, 0x04,
	0x04, 0x01, 0x00, 0x71, 0xDF, 0x01, 0x04, 0x25, 0x6C, 0xBC, 0x03, 0x04, 0xFB, 0x6C, 0x9D, 0x03,
	0x04, 0xFB, 0x52, 0x06, 0x5A, 0x33, 0x00, 0xF1, 0x10, 0x73, 0xDF, 0x06, 0x04, 0x03, 0x00, 0x71,
	0xDF, 0x01, 0x04, 0x66, 0xAC, 0x8A, 0x00, 0x60, 0x22, 0x33, 0x01, 0xF1, 0x10, 0x73, 0xDF, 0x06,
	0x04, 0x03, 0x00, 0x71, 0xDF, 0x01, 0x04, 0x66, 0xAC, 0xAD, 0x00, 0x60, 0x0E, 0x73, 0xDF, 0x06,
	0x04, 0x01, 0x00, 0x71, 0xDF, 0x01, 0x04, 0x66, 0xAC, 0x8A, 0x00, 0x52, 0x03, 0x04, 0x33, 0x66,
	0xF1, 0xF9, 0x5A, 0x02, 0x66, 0x38, 0x06, 0x00, 0x9F, 0x8C, 0xCF, 0x00, 0x5A, 0x02, 0x66, 0x38,
	0x01, 0x00, 0x6F, 0x05, 0x35, 0x04, 0x5A, 0x02, 0x66, 0x38, 0x01, 0x00, 0x6F, 0x15, 0x00, 0x00,
	0x64, 0x99, 0x62, 0xF1, 0x2A, 0x2A, 0xE8, 0x27, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05,
	0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x71, 0xDF,
	0xF9, 0x03, 0x1F, 0x71, 0xDF, 0xFD, 0x03, 0xFF, 0x71, 0xDF, 0xE8, 0x03, 0x00, 0x60, 0x18, 0x5A,
	0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x32, 0x5A, 0x02, 0x66,
	0x38, 0x02, 0x00, 0x6F, 0x15, 0x60, 0xB9, 0xA8, 0x04, 0x00, 0xAC, 0xF4, 0x63, 0x64, 0xD4, 0x62,
	0xAC, 0xF4, 0x63, 0x72, 0x94, 0x00, 0x2A, 0x38, 0x02, 0x60, 0x54, 0x2A, 0x07, 0x03, 0x62, 0xEF,
	0x5B, 0x2A, 0x08, 0x03, 0x62, 0x01, 0x5D, 0x2A, 0x27, 0x03, 0x62, 0x85, 0x5E, 0x2A, 0x28, 0x03,
	0x62, 0x2D, 0x5F, 0x2A, 0x48, 0x03, 0x62, 0xD5, 0x5F, 0x2A, 0x39, 0x03, 0x62, 0xF0, 0x60, 0x2A,
	0x49, 0x14, 0x71, 0x94, 0x01, 0x71, 0xA2, 0x8B, 0x15, 0x9B, 0xA8, 0x04, 0x00, 0xAC, 0xF4, 0x63,
	0x64, 0xD4, 0x62, 0x62, 0xA4, 0x61, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08,
	0xF0, 0xF4, 0x42, 0x32, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB, 0x5A, 0x5A,
	0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A, 0x02, 0x66,
	0x38, 0x02, 0x00, 0x6F, 0x15, 0x6C, 0x78, 0xE8, 0x03, 0x42, 0xFF, 0x6F, 0x11, 0x06, 0x73, 0xDF,
	0xAA, 0x0A, 0xAA, 0x00, 0x06, 0x73, 0xDF, 0x54, 0x05, 0x55, 0x00, 0x06, 0x73, 0xDF, 0xAA, 0x0A,
	0x80, 0x00, 0x06, 0x73, 0xDF, 0xAA, 0x0A, 0xAA, 0x00, 0x06, 0x73, 0xDF, 0x54, 0x05, 0x55, 0x00,
	0x06, 0x73, 0xDF, 0xAA, 0x0A, 0x10, 0x00, 0x4A, 0xAA, 0x0A, 0x9A, 0x64, 0x3C, 0x63, 0x6C, 0x58,
	0xE8, 0x03, 0x52, 0x07, 0x5A, 0x33, 0x53, 0xF1, 0x19, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00,
	0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62,
	0xFB, 0x5A, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31,
	0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB, 0x5A, 0x5A, 0x02, 0x66, 0x38, 0x03,
	0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F,
	0x15, 0x71, 0x94, 0x01, 0x71, 0xBF, 0xF6, 0x65, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05,
	0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0xAC, 0xF4,
	0x63, 0xA8, 0x0A, 0x00, 0x64, 0xD4, 0x62, 0xA8, 0x0A, 0x00, 0xAA, 0xF4, 0x63, 0x42, 0x00, 0x6F,
	0x11, 0x64, 0xFE, 0x62, 0xF0, 0x1B, 0x42, 0x35, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F,
	0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB,
	0x5A, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A,
	0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x52, 0xF8, 0x65, 0x6F, 0x11, 0x6C, 0x78, 0xE8, 0x03,
	0x5A, 0xF6, 0x65, 0x9A, 0xA9, 0xF4, 0x63, 0x8A, 0x3C, 0x00, 0xF0, 0x4A, 0xAA, 0x0A, 0x2D, 0x5B,
	0xFA, 0x65, 0x8A, 0x3C, 0x00, 0xF0, 0x4A, 0x54, 0x05, 0x2D, 0x5B, 0xFE, 0x65, 0xA8, 0x04, 0x00,
	0x4A, 0xAA, 0x00, 0x5A, 0xFA, 0x65, 0x06, 0x6F, 0x1D, 0x4A, 0x55, 0x00, 0x5A, 0xFE, 0x65, 0x06,
	0x6F, 0x1D, 0x4A, 0xA0, 0x00, 0x5A, 0xFA, 0x65, 0x06, 0x6F, 0x1D, 0x73, 0x89, 0x73, 0xAA, 0x64,
	0x3C, 0x63, 0x73, 0x89, 0x76, 0x6A, 0xF1, 0x28, 0x73, 0x41, 0x73, 0x41, 0x73, 0x42, 0x73, 0x42,
	0x76, 0xE0, 0xCD, 0x6C, 0x58, 0xE8, 0x03, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34,
	0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB, 0x5A,
	0x6C, 0x58, 0xE8, 0x03, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4,
	0x42, 0x34, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB, 0x5A, 0x5A, 0x02, 0x66,
	0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A, 0x02, 0x66, 0x38, 0x02,
	0x00, 0x6F, 0x15, 0x71, 0x94, 0x01, 0x71, 0xBF, 0xF6, 0x65, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00,
	0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15,
	0xAC, 0xF4, 0x63, 0xA8, 0x02, 0x02, 0x64, 0xD4, 0x62, 0xA8, 0x02, 0x02, 0xAA, 0xF4, 0x63, 0x42,
	0x00, 0x6F, 0x11, 0x64, 0xFE, 0x62, 0xF0, 0x1B, 0x42, 0x35, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03,
	0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15,
	0x62, 0xFB, 0x5A, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42,
	0x30, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x52, 0xF8, 0x65, 0x6F, 0x11, 0x6C, 0x78,
	0xE8, 0x03, 0x5A, 0xF6, 0x65, 0x9A, 0xA9, 0xF4, 0x63, 0x8A, 0x3C, 0x00, 0xF0, 0x4A, 0xAA, 0x0A,
	0x2D, 0x5B, 0xFA, 0x65, 0x8A, 0x3C, 0x00, 0xF0, 0x4A, 0x54, 0x05, 0x2D, 0x5B, 0xFE, 0x65, 0x6F,
	0x01, 0x34, 0xF0, 0xF1, 0x6C, 0xA8, 0x00, 0x02, 0x6F, 0x01, 0x33, 0x0E, 0xF1, 0x32, 0x8A, 0x3B,
	0x00, 0xFF, 0xF1, 0x03, 0xA8, 0x00, 0x01, 0x6C, 0x78, 0xE1, 0x03, 0x72, 0x89, 0x72, 0xAA, 0x52,
	0xE2, 0x03, 0x34, 0x03, 0xF1, 0xF9, 0x72, 0x89, 0x74, 0x6A, 0xF1, 0x0D, 0x73, 0x41, 0x73, 0x42,
	0x76, 0xE0, 0xE8, 0x6C, 0x58, 0xE1, 0x03, 0x60, 0x6E, 0x6C, 0x58, 0xE1, 0x03, 0x62, 0x68, 0x5E,
	0x4A, 0xAA, 0x00, 0x5A, 0xFA, 0x65, 0x06, 0x6F, 0x15, 0x4A, 0x55, 0x00, 0x5A, 0xFE, 0x65, 0x06,
	0x6F, 0x15, 0x4A, 0xA0, 0x00, 0x5A, 0xFA, 0x65, 0x06, 0x6F, 0x15, 0x72, 0x89, 0x72, 0xAA, 0x64,
	0x76, 0x63, 0x72, 0x89, 0x74, 0x6A, 0xF1, 0x5C, 0x73, 0x41, 0x73, 0x42, 0x76, 0xE0, 0xD1, 0x60,
	0x36, 0xA8, 0x00, 0x01, 0x4A, 0xAA, 0x00, 0x5A, 0xFA, 0x65, 0x06, 0x6F, 0x1D, 0x4A, 0x55, 0x00,
	0x5A, 0xFE, 0x65, 0x06, 0x6F, 0x1D, 0x4A, 0xA0, 0x00, 0x5A, 0xFA, 0x65, 0x06, 0x6F, 0x1D, 0x73,
	0x89, 0x73, 0xAA, 0x64, 0x3C, 0x63, 0x73, 0x89, 0x76, 0x6A, 0xF1, 0x28, 0x73, 0x41, 0x73, 0x41,
	0x73, 0x42, 0x73, 0x42, 0x76, 0xE0, 0xCD, 0x6C, 0x58, 0xE8, 0x03, 0x5A, 0x02, 0x66, 0x38, 0x03,
	0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F,
	0x15, 0x62, 0xFB, 0x5A, 0x6C, 0x58, 0xE8, 0x03, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05,
	0x34, 0x08, 0xF0, 0xF4, 0x42, 0x34, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB,
	0x5A, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A,
	0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0xBC, 0x01, 0x9A, 0x6C, 0x58, 0xE8, 0x03, 0x5A, 0x02,
	0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38,
	0x02, 0x00, 0x6F, 0x15, 0x72, 0x94, 0x03, 0x6F, 0x11, 0xA8, 0x08, 0x00, 0x72, 0x8A, 0x96, 0x5A,
	0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38,
	0x02, 0x00, 0x6F, 0x15, 0x73, 0x42, 0x76, 0xE0, 0xE3, 0xBC, 0x01, 0x9A, 0xA8, 0x08, 0x00, 0x64,
	0xFE, 0x62, 0x83, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4,
	0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x82, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03,
	0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15,
	0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02,
	0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB, 0x5A, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F,
	0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0xBC,
	0x01, 0x9A, 0x6C, 0x58, 0xE8, 0x03, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08,
	0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x72, 0x94, 0x03, 0x6F,
	0x11, 0xA8, 0x00, 0x02, 0x72, 0x8A, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34,
	0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x73, 0x42, 0x76, 0xE0,
	0xE3, 0xBC, 0x01, 0x9A, 0xA8, 0x00, 0x02, 0x64, 0xFE, 0x62, 0x83, 0x96, 0x5A, 0x02, 0x66, 0x38,
	0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F,
	0x15, 0x82, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86,
	0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05,
	0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB,
	0x5A, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A,
	0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x71, 0x94, 0x01, 0x71, 0xA0, 0x89, 0x15, 0x99, 0x6C,
	0x58, 0xE8, 0x03, 0x4B, 0x00, 0x00, 0xDF, 0x00, 0x71, 0xA0, 0x6F, 0x48, 0x00, 0x3B, 0xFF, 0xFF,
	0xF1, 0x42, 0x71, 0x40, 0x71, 0x40, 0x71, 0x80, 0x1B, 0x00, 0xA0, 0xDF, 0x00, 0xF2, 0xEB, 0x4B,
	0x00, 0x00, 0xFE, 0x00, 0x71, 0xA0, 0x6F, 0x48, 0x00, 0x3B, 0xFF, 0xFF, 0xF1, 0x26, 0x71, 0x40,
	0x71, 0x40, 0x71, 0x80, 0x1B, 0x00, 0x00, 0x00, 0x01, 0xF2, 0xE9, 0x5A, 0x02, 0x66, 0x38, 0x03,
	0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F,
	0x15, 0x62, 0xFB, 0x5A, 0x9E, 0x7B, 0xA1, 0x7B, 0x80, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F,
	0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x34, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x83,
	0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02,
	0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x82, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05,
	0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x81, 0x96, 0x5A,
	0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38,
	0x02, 0x00, 0x6F, 0x15, 0x80, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08,
	0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x84, 0x96, 0x5A, 0x02, 0x66,
	0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00,
	0x6F, 0x15, 0x85, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4,
	0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB, 0x5A, 0x5A, 0x02, 0x66, 0x38,
	0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00,
	0x6F, 0x15, 0x71, 0x94, 0x01, 0x71, 0xBF, 0xF6, 0x65, 0x52, 0xF8, 0x65, 0x6F, 0x11, 0x5A, 0xF6,
	0x65, 0x9A, 0x8A, 0x3C, 0x00, 0xF0, 0x4A, 0xAA, 0x0A, 0x2D, 0x5B, 0xFA, 0x65, 0x8A, 0x3C, 0x00,
	0xF0, 0x4A, 0x54, 0x05, 0x2D, 0x5B, 0xFE, 0x65, 0x6C, 0x78, 0xE8, 0x03, 0x4A, 0xAA, 0x00, 0x5A,
	0xFA, 0x65, 0x06, 0x6F, 0x15, 0x4A, 0x55, 0x00, 0x5A, 0xFE, 0x65, 0x06, 0x6F, 0x15, 0x4A, 0x80,
	0x00, 0x5A, 0xFA, 0x65, 0x06, 0x6F, 0x15, 0x4A, 0xAA, 0x00, 0x5A, 0xFA, 0x65, 0x06, 0x6F, 0x15,
	0x4A, 0x55, 0x00, 0x5A, 0xFE, 0x65, 0x06, 0x6F, 0x15, 0x4A, 0x30, 0x00, 0x8A, 0x06, 0x6F, 0x15,
	0x64, 0x3C, 0x63, 0x6C, 0x58, 0xE8, 0x03, 0x52, 0x07, 0x5A, 0x33, 0x53, 0xF1, 0x19, 0x96, 0x5A,
	0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38,
	0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB, 0x5A, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34,
	0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB, 0x5A,
	0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A, 0x02,
	0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0xAC, 0xF4, 0x63, 0x71, 0x94, 0x00, 0x71, 0xA0, 0x6C, 0x58,
	0xE8, 0x03, 0x6F, 0x4A, 0x00, 0x3B, 0xFF, 0xFF, 0xF1, 0x23, 0x71, 0x42, 0x71, 0x42, 0x71, 0x82,
	0x70, 0x60, 0xF2, 0xEE, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4,
	0x42, 0x31, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xFB, 0x5A, 0x9E, 0x7B, 0xA3,
	0x7B, 0x82, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x34,
	0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x83, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00,
	0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x82,
	0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02,
	0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x81, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05,
	0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x80, 0x96, 0x5A,
	0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38,
	0x02, 0x00, 0x6F, 0x15, 0x84, 0x96, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08,
	0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x85, 0x96, 0x5A, 0x02, 0x66,
	0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x86, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00,
	0x6F, 0x15, 0x62, 0xFB, 0x5A, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x42, 0xE0, 0x2C,
	0xF1, 0x11, 0x1E, 0x42, 0x10, 0x2C, 0xF0, 0xED, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x05,
	0x25, 0x04, 0x67, 0x5A, 0x02, 0x66, 0x38, 0x01, 0x00, 0x6F, 0x05, 0x35, 0x04, 0x5A, 0x02, 0x66,
	0x38, 0x01, 0x00, 0x6F, 0x15, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x05, 0x24, 0xFB, 0x67,
	0x8C, 0x99, 0x64, 0x99, 0x62, 0xF1, 0x08, 0x72, 0xA9, 0x73, 0x41, 0x76, 0xE0, 0xF4, 0x67, 0x5A,
	0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x32, 0x5A, 0x02, 0x66,
	0x38, 0x02, 0x00, 0x6F, 0x15, 0x17, 0x02, 0x62, 0xFB, 0x5A, 0xAD, 0x00, 0x00, 0x72, 0x8E, 0x16,
	0x76, 0xC5, 0x0C, 0xF3, 0x03, 0x3E, 0x21, 0x10, 0x0C, 0xF3, 0x03, 0x3E, 0x21, 0x10, 0x0C, 0xF3,
	0x03, 0x3E, 0x21, 0x10, 0x0C, 0xF3, 0x03, 0x3E, 0x21, 0x10, 0x0C, 0xF3, 0x03, 0x3E, 0x21, 0x10,
	0x0C, 0xF3, 0x03, 0x3E, 0x21, 0x10, 0x0C, 0xF3, 0x03, 0x3E, 0x21, 0x10, 0x0C, 0xF3, 0x03, 0x3E,
	0x21, 0x10, 0x9D, 0x76, 0xE0, 0xC7, 0x8D, 0x67, 0x73, 0x8A, 0x00, 0x73, 0x8A, 0x2E, 0x34, 0x40,
	0xF0, 0x10, 0x73, 0x8A, 0x34, 0x20, 0xF0, 0xF0, 0x73, 0x8A, 0x00, 0x73, 0x8A, 0x2E, 0x34, 0x40,
	0xF1, 0x01, 0x67, 0x6C, 0x58, 0xE8, 0x03, 0x5A, 0x02, 0x66, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34,
	0x08, 0xF0, 0xF4, 0x42, 0x34, 0x5A, 0x02, 0x66, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x17, 0x02, 0x62,
	0xFB, 0x5A, 0x72, 0x8A, 0x00, 0x72, 0x8A, 0x2E, 0x34, 0x40, 0xF0, 0x10, 0x72, 0x8A, 0x34, 0x20,
	0xF0, 0xF0, 0x72, 0x8A, 0x00, 0x72, 0x8A, 0x2E, 0x34, 0x40, 0xF1, 0x01, 0x67, 0x5A, 0x02, 0x66,
	0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x34, 0x5A, 0x02, 0x66, 0x38, 0x02,
	0x00, 0x6F, 0x15, 0x17, 0x02, 0x62, 0xFB, 0x5A, 0x73, 0xDF, 0x0E, 0x04, 0x80, 0x69, 0x73, 0xDF,
	0x0E, 0x04, 0x80, 0x96, 0x71, 0xDF, 0x0E, 0x04, 0x80, 0x73, 0xDF, 0x0E, 0x04, 0x80, 0x96, 0x67,
	0x42, 0x31, 0x5A, 0x3C, 0x6F, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x71, 0xDF, 0xF9, 0x03, 0x1F, 0x71,
	0xDF, 0xFD, 0x03, 0xFF, 0x71, 0xDF, 0xE8, 0x03, 0x00, 0x60, 0x18, 0x5A, 0x3C, 0x6F, 0x38, 0x03,
	0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x32, 0x5A, 0x3C, 0x6F, 0x38, 0x02, 0x00, 0x6F,
	0x15, 0x60, 0xB9, 0xA8, 0x04, 0x00, 0xAC, 0x2E, 0x6D, 0x64, 0x0E, 0x6C, 0xAC, 0x2E, 0x6D, 0x72,
	0x94, 0x00, 0x2A, 0x38, 0x02, 0x60, 0x54, 0x2A, 0x07, 0x03, 0x62, 0xEB, 0x64, 0x2A, 0x08, 0x03,
	0x62, 0xFD, 0x65, 0x2A, 0x27, 0x03, 0x62, 0x92, 0x67, 0x2A, 0x28, 0x03, 0x62, 0x3A, 0x68, 0x2A,
	0x48, 0x03, 0x62, 0xE2, 0x68, 0x2A, 0x39, 0x03, 0x62, 0x2A, 0x6A, 0x2A, 0x49, 0x14, 0x71, 0x94,
	0x01, 0x71, 0xA2, 0x8B, 0x15, 0x9B, 0xA8, 0x04, 0x00, 0xAC, 0x2E, 0x6D, 0x64, 0x0E, 0x6C, 0x62,
	0xDE, 0x6A, 0x5A, 0x3C, 0x6F, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x32,
	0x5A, 0x3C, 0x6F, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xF7, 0x63, 0x5A, 0x3C, 0x6F, 0x38, 0x03,
	0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A, 0x3C, 0x6F, 0x38, 0x02, 0x00, 0x6F,
	0x15, 0x6C, 0x78, 0xE8, 0x03, 0x42, 0xFF, 0x6F, 0x11, 0x06, 0x73, 0xDF, 0xAA, 0x0A, 0xAA, 0x00,
	0x06, 0x73, 0xDF, 0x54, 0x05, 0x55, 0x00, 0x06, 0x73, 0xDF, 0xAA, 0x0A, 0x80, 0x00, 0x06, 0x73,
	0xDF, 0xAA, 0x0A, 0xAA, 0x00, 0x06, 0x73, 0xDF, 0x54, 0x05, 0x55, 0x00, 0x06, 0x73, 0xDF, 0xAA,
	0x0A, 0x10, 0x00, 0x4A, 0xAA, 0x0A, 0x9A, 0x64, 0x76, 0x6C, 0x6C, 0x58, 0xE8, 0x03, 0x52, 0x03,
	0x63, 0x33, 0x53, 0xF1, 0x19, 0x96, 0x5A, 0x3C, 0x6F, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08,
	0xF0, 0xF4, 0x86, 0x5A, 0x3C, 0x6F, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xF7, 0x63, 0x5A, 0x3C,
	0x6F, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x31, 0x5A, 0x3C, 0x6F, 0x38,
	0x02, 0x00, 0x6F, 0x15, 0x62, 0xF7, 0x63, 0x5A, 0x3C, 0x6F, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34,
	0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A, 0x3C, 0x6F, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x71, 0x94, 0x01,
	0x71, 0xBF, 0x30, 0x6F, 0x5A, 0x3C, 0x6F, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4,
	0x42, 0x31, 0x5A, 0x3C, 0x6F, 0x38, 0x02, 0x00, 0x6F, 0x15, 0xAC, 0x2E, 0x6D, 0xA8, 0x0A, 0x00,
	0x64, 0x0E, 0x6C, 0xA8, 0x0A, 0x00, 0xAA, 0x2E, 0x6D, 0x42, 0x00, 0x6F, 0x11, 0x64, 0x38, 0x6C,
	0xF0, 0x1B, 0x42, 0x35, 0x96, 0x5A, 0x3C, 0x6F, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0,
	0xF4, 0x86, 0x5A, 0x3C, 0x6F, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xF7, 0x63, 0x5A, 0x3C, 0x6F,
	0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x30, 0x5A, 0x3C, 0x6F, 0x38, 0x02,
	0x00, 0x6F, 0x15, 0x52, 0x32, 0x6F, 0x6F, 0x11, 0x6C, 0x78, 0xE8, 0x03, 0x5A, 0x30, 0x6F, 0x9A,
	0xA9, 0x2E, 0x6D, 0x8A, 0x3C, 0x00, 0xF0, 0x4A, 0xAA, 0x0A, 0x2D, 0x5B, 0x34, 0x6F, 0x8A, 0x3C,
	0x00, 0xF0, 0x4A, 0x54, 0x05, 0x2D, 0x5B, 0x38, 0x6F, 0xA8, 0x04, 0x00, 0x4A, 0xAA, 0x00, 0x5A,
	0x34, 0x6F, 0x06, 0x6F, 0x1D, 0x4A, 0x55, 0x00, 0x5A, 0x38, 0x6F, 0x06, 0x6F, 0x1D, 0x4A, 0xA0,
	0x00, 0x5A, 0x34, 0x6F, 0x06, 0x6F, 0x1D, 0x73, 0x89, 0x73, 0xAA, 0x64, 0x76, 0x6C, 0x73, 0x89,
	0x76, 0x6A, 0xF1, 0x28, 0x73, 0x41, 0x73, 0x41, 0x73, 0x42, 0x73, 0x42, 0x76, 0xE0, 0xCD, 0x6C,
	0x58, 0xE8, 0x03, 0x5A, 0x3C, 0x6F, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42,
	0x31, 0x5A, 0x3C, 0x6F, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xF7, 0x63, 0x6C, 0x58, 0xE8, 0x03,
	0x5A, 0x3C, 0x6F, 0x38, 0x03, 0x00, 0x6F, 0x05, 0x34, 0x08, 0xF0, 0xF4, 0x42, 0x34, 0x5A, 0x3C,
	0x6F, 0x38, 0x02, 0x00, 0x6F, 0x15, 0x62, 0xF7, 0x63, 0x5A, 0x3C, 0x6F, 0x38, 0x03, 0x00, 0x6F
};
dword arrd_18EB[] = {0x00DF0000, 0x00DF2000, 0x00FE0000, 0x00000000};
dword arrd_18FB[] = {0x00DF01FF, 0x00DF9FFF, 0x00FFFFFF, 0x00000000};
dword arrd_190B[] = {0x00002580, 0x00002580, 0x00002580};
dword arrd_1917[] = {0x0001C200, 0x0001C200, 0x0001C200};
byte b_1942;
dword d_1943;
dword d_1947;

emem fbuf=0;

proc unused_0000()
{
}

proc debug_out()
{
	var a, i, n;

	n = device.d_0852_dbg_n;
	print("\nDBG_N: " + #i.n);
	print("\n");
	i = 0;
	while(i !=n)
	{
		a = device.b_084A_dbgu[i];

		print("" + #i.a + " ");
		if ((i & 0x0F) = 0x0F){ print("\n"); }
		i = i + 1;
	}
	print("\n");
}

proc prc_007F()
{
	if (b_1942 = 1) {
		print("\n 	..start. no resp.");
		return;
	}
	if (b_1942 = 2) {
		print("\n 	..test. no resp.");
		return;
	}
	if (b_1942 = 3) {
		print("\n 	..no re-ask.");
		return;
	}
	if (b_1942 = 4) {
		print("\n 	..bad re-ask.");
		return;
	}
	if (b_1942 = 5) {
		print("\n 	..no ok.");
		return;
	}
	if (b_1942 = 6) {
		print("\n 	..not ok.");
		return;
	}
	if (b_1942 = 7) {
		print("\n 	..data rcv error.");
		return;
	}
	if (b_1942 = 8) {
		print("\n 	..no crc high byte.");
		return;
	}
	if (b_1942 = 9) {
		print("\n 	..no crc low byte.");
		return;
	}
	if (b_1942 = 10) {
		print("\n 	..no term byte.");
		return;
	}
	if (b_1942 = 16) {
		print("\n 	..bad crc.");
		return;
	}
	if (b_1942 = 32) {
		print("\n 	..wr. hdr. ack. no re-ask.");
		return;
	}
	if (b_1942 = 33) {
		print("\n 	..wr. hdr. ack. bad re-ask.");
		return;
	}
	if (b_1942 = 34) {
		print("\n 	..wr. hdr. ack. no ok.");
		return;
	}
	if (b_1942 = 35) {
		print("\n 	..wr. hdr. ack. not ok.");
		return;
	}
	if (b_1942 = 36) {
		print("\n 	..wr. tail ack. no re-ask.");
		return;
	}
	if (b_1942 = 37) {
		print("\n 	..wr. tail ack. bad re-ask.");
		return;
	}
	if (b_1942 = 38) {
		print("\n 	..wr. tail ack. no ok.");
		return;
	}
	if (b_1942 = 39) {
		print("\n 	..wr. tail ack. not ok.");
		return;
	}
	if (b_1942 = 96) {
		print("\n 	..ers. ack. no re-ask.");
		return;
	}
	if (b_1942 = 97) {
		print("\n 	..ers. ack. bad re-ask.");
		return;
	}
	if (b_1942 = 98) {
		print("\n 	..ers. ack. no ok.");
		return;
	}
	if (b_1942 = 99) {
		print("\n 	..ers. ack. not ok.");
		return;
	}
	if (b_1942 = 224) {
		print("\n 	..birom: no re-ask.");
		return;
	}
	if (b_1942 = 225) {
		print("\n 	..birom: ers. ack. not ok.");
		return;
	}
	if (b_1942 = 226) {
		print("\n 	..birom: no d_l.");
		return;
	}
	if (b_1942 = 227) {
		print("\n 	..birom: ers. ack. d_l.");
		return;
	}
	print("\n 	..unknown.");
}

proc prc_02E3(a0){
	if (a0) {
		print("\n ___________________________________");
		print("\n 		Result: Ok.");
	} else {
		prc_007F();
		print("\n ___________________________________");
		print("\n 		Result: Failed.");
	}
	print("\n");
	device.prc_id0();
	device.prc_id1(0);
}

proc prc_033A(a0){
	device.b_165F = 1;
	if (a0 = 1) device.prc_id2();
	if (a0 = 2) device.prc_id3();
	if (a0 = 3) device.prc_id4();
	if (a0 = 4) device.prc_id5();
	while(device.b_165F != 0);
	b_1942 = device.b_1660;
	if (b_1942=0) return(1);
	return(0);
}

proc prc_03B1(a0){
	var i;

	i = 0;
	while(i < 3) {
		device.b_165C = (a0 >> 16) & 0xFF;
		device.b_165D = (a0 >> 8) & 0xFF;
		device.b_165E = a0 & 0xFF;
		prc_033A(2);
		if (b_1942=0) return(1);
		i++;
	}
	return(0);
}

proc prc_0421(a0){
	var i;

	i = 0;
	while(i < 1) {
		device.b_165C = (a0 >> 16) & 0xFF;
		device.b_165D = (a0 >> 8) & 0xFF;
		device.b_165E = a0 & 0xFF;
		prc_033A(3);
		if (b_1942=0) return(1);
		i++;
	}
	return(0);
}

proc prc_0491(a0){
	var i;

	i = 0;
	while(i != 3) {
		device.b_165C = (a0 >> 16) & 0xFF;
		device.b_165D = (a0 >> 8) & 0xFF;
		device.b_165E = a0 & 0xFF;
		prc_033A(4);
		if (b_1942=0) return(1);
		i++;
	}
	return(0);
}

proc prc_04FF(a0){
	var i;

	i = 0;
	while(i < 512) {
		if (fbuf[a0] != 0xFF) return(1);
		a0++;
		i++;
	}
	return(0);
}

proc prc_0530(){
	var v0, v1;

	v1 = list_1923;
	v0 = arrd_190B[v1];
	device.d_1661 = v0;

	if (arrd_1917[0]=0)
		v0 *= 2;
	else
		v0 = arrd_1917[v1];

	device.d_1665 = v0;

	if (list_1924=0)
		device.prc_id1(1);
	else
		device.prc_id1(3);

	Delay(50);
	PBMAX = 0;
	PBPOS = 0;
	print("\n  Kernel load: ");
	kernel_0CEB[2] = 0xFF & v1;
	memcopy(device.b_085C = kernel_0CEB, 3072);
	v0 = prc_033A(1);
	if (v0 = 0) {
		print("Error!");
		prc_02E3(0);
		return(1);
	}
	print("Ок.");
	return(0);
}

proc prc_0602(){
	PBMAX = 321;
	PBPOS = 0;
}

proc prc_0617(){
	PBPOS = PBPOS + 1;
}

proc prc_0628(){
	PBMAX = 0;
	PBPOS = 0;
}

proc Read_All()
{
	var v0, v1, v2, v3;

	for (v0 = 0; v0 < MEM_SIZE; v0++)
		fbuf[v0] = 0xFF;

	print("\n");
	print("MB96F615A/R");
	print(" reading... ");

	v0 = prc_0530();
	if (v0) return;

	print("\n  Flash read:");
	prc_0602();

	v1 = 0;
	v3 = 0;
	while(arrd_18FB[v1] != 0) {
		d_1943 = arrd_18EB[v1];
		d_1947 = arrd_18FB[v1];
		print("\n             Block " + #h4.d_1943 + ":" + #h4.d_1947 + " (Editor : " + #h4.v3 + ") ");
		
		v2 = arrd_18EB[v1];
		while(v2 < arrd_18FB[v1]) {
			v0 = prc_03B1(v2);
			if (v0=0) {
				print("Error!");
				prc_02E3(0);
				return;
			}
			memcopy(fbuf[v3] = device.b_145C, 512);
			v3 += 512;
			v2 += 512;
			prc_0617();
		}
		v1++;
		print("Ок");
	}
	prc_0628();
	prc_02E3(1);
}

proc Write_All()
{
	var v0, v1, v2, v3;

	print("\n");
	print("MB96F615A/R");
	print(" writing... ");

	v0 = prc_0530();
	if (v0) return;

	print("\n  Flash write:");
	prc_0602();

	v1 = 0;
	v3 = 0;
	while(arrd_18FB[v1] != 0) {
		d_1943 = arrd_18EB[v1];
		d_1947 = arrd_18FB[v1];
		print("\n             Block " + #h4.d_1943 + ":" + #h4.d_1947 + " (Editor : " + #h4.v3 + ") ");
		
		v2 = arrd_18EB[v1];
		while(v2 < arrd_18FB[v1]) {
			v0 = prc_04FF(v3);
			if (v0=1) {
				memcopy(device.b_145C = fbuf[v3], 512);
				v0 = prc_0421(v2);
				if (v0=0){
					print("Error!");
					prc_02E3(0);
					return;
				}
			}
			v3 += 512;
			v2 += 512;
			prc_0617();
		}
		v1++;
		print("Ок");
	}
	prc_0628();
	prc_02E3(1);
}

proc Erase_All()
{
	var v0;

	print("\n");
	print("MB96F615A/R");
	print(" erase... ");

	v0 = prc_0530();
	if (v0)	return;

	print("\n  Flash erase: ");
	v0 = prc_0491(arrd_18EB[0]);
	if (v0=0) {
		print("Error!");
		prc_02E3(0);
		return;
	}

	for (v0 = 0; v0 < MEM_SIZE; v0++)
		fbuf[R0] = 0xFF;

	print("Ок");
	PBMAX = 0;
	PBPOS = 0;
	prc_02E3(1);
}

proc unused_08E2()
{
}

$DEVICE

byte	b_084A_dbgu[8];
dword	d_0852_dbg_n;
dword	d_0856_dbg_timer;

word	w_085A;
byte	b_085c[3072];
byte	b_145c[512];

byte	b_165C;
byte	b_165D;
byte	b_165E;
byte	b_165F;
byte	b_1660;
dword	d_1661;
dword	d_1665;
dword	d_1669;
word	w_166D;


proc prc_0000(){
	d_1669 = 0;
	w_166D = 0xFF;
}

proc prc_0010(a0){
	d_1669 = d_1669 + a0;
	if (d_1669 > w_166D) {
		d_1669++;
		w_166D = w_166D + 0x100;
	}
	if (d_1669 > 0xFFFF) {
		d_1669++;
	}
}

proc prc_0062(){
	return(0xFF - (d_1669 & 0xFF));
}

proc unused_0078(){
	return(POWER & 0x01);
}

proc prc_id1(R0){
	PORTA |= 0x40;
	PWM0 = 0;
	POWER = R0;

	if (R0) {
		PORTE |= 0x4;
		PORTE &= 0x2 ^ 0xFF;
		PORTE &= 0x1 ^ 0xFF;
	}
}

proc prc_00A9(){
	var v0, v1;

	v1 = 1000;
	TIMER = 0;
	while(TIMER < v1) {
		v0 = UART_DATA;
		if ((v0 & 0x8000) = 0) {
			w_085A = v0 & 0xFF;
			return(1);
		}
	}
	return(0);
}

proc prc_00E1(){
	var v0, v1;

	v1 = 0;
	while(v1 != 60) {
		v0 = prc_00A9();
		if (v0 = 1) return(1);
		v1++;
	}
	return(0);
}

proc prc_010A(){
	var v0, v1, v2;

	v2 = 1000;
	TIMER = 0;
	for (v1 = 0; v1 < 512; v1++) {
		if (TIMER > v2) return(0);
		v0 = UART_DATA;
		if (v0 & 0x8000) continue;
		TIMER = 0;
		b_145C[v1] = v0 & 0xFF;
	}
	return(1);
}

proc prc_0159(a0){
	TIMER = 0;
	while(TIMER < a0);
}

proc prc_id2(){
	var v0, v1, v2, v3, v4, v5, v6, v7;

	b_1660 = 0;
	b_165F = 1;
	TIMER_ENABLE = 1;
	PORTB |= 0x40;
	prc_0159(10);
	PORTB &= 0x40 ^ 0xFF;
	PORTB &= 0x20 ^ 0xFF;
	prc_0159(10);
	PORTB |= 0x40;
	prc_0159(100);
	UART_CR = 0x24980000 | d_1661;

	for (v1 = 0; v1 < 20; v1 = v1 + 1) {
		UART_DATA = 0x00;
		UART_DATA = 0x55;
		UART_DATA = 0x66;
		UART_DATA = 0x77;
		UART_DATA = 0x88;
		v0 = UART_DATA;
		v0 = UART_DATA;
		v0 = UART_DATA;
		v0 = UART_DATA;
		v0 = UART_DATA;
		v3 = 20;
		TIMER = 0;
		v4 = 0;
		while(TIMER < v3) {
			v2 = UART_DATA;
			if ((v2 & 0x8000) = 0) {
				v2 &= 0xFF;
				if (v2 = 70)
					break;
				if (v4)
					break;
				v4 = 1;
			}
			v2 = 0;
		}

		if (v2 = 70) {
			UART_DATA = 0x00;
			UART_DATA = 0x55;
			UART_DATA = 0x87;
			UART_DATA = 0x00;
			UART_DATA = 0x78;
			v0 = prc_00A9();
			if (v0) {
				if (w_085A = 105)
					break;
			}
		}
	}
	
	if (v1 = 20) {
		b_1660 = 224;
		TIMER_ENABLE = 0;
		b_165F = 0;
		return(0);
	}

	if (w_085A = 105) {
		UART_DATA = 0x90;
		UART_DATA = 0x00;
		UART_DATA = 0x00;
		UART_DATA = 0xFF;
		UART_DATA = 0x01;
		UART_DATA = 0x6E;

		v0 = prc_00A9();
		if (v0) {
			if (w_085A = 150) {
				b_1660 = 225;
			} else {
				if (w_085A = 105) {
					v0 = prc_00A9();
					v0 = prc_00A9();
				} else {
					b_1660 = 224;
				}
			}
		}
	} else {
		b_1660 = 225;
	}

	prc_0159(10);

	v6 = 26116;
	v7 = 0;
	v5 = 23044;
	while(v5 < v6) {
		prc_0000();
		UART_DATA = 18;
		prc_0010(18);
		UART_DATA = v5 & 0xFF;
		prc_0010(v5 & 0xFF);
		UART_DATA = (v5 >> 8) & 0xFF;
		prc_0010((v5 >> 8) & 0xFF);
		UART_DATA = 0;
		UART_DATA = 0;
		UART_DATA = prc_0062();
		prc_0000();

		for (v1 = 0; v1 < 256; v1++) {
			if (v7 < 3072) {
				UART_DATA = b_085C[v7];
				prc_0010(b_085C[v7]);
			} else {
				UART_DATA = 0;
			}
			v7++; 
		}
		UART_DATA = prc_0062();
		v0 = prc_00A9();
		if (w_085A != 105)
			b_1660 = 241;

		v5 += 256;
	}

	prc_0000();
	UART_DATA = 0x9F;
	prc_0010(159);
	v2 = 4;
	UART_DATA = v2;
	prc_0010(v2);
	v2 = 90;
	UART_DATA = v2;
	prc_0010(v2);
	UART_DATA = 0;
	UART_DATA = prc_0062();
	v0 = prc_00A9();
	if (w_085A != 105)
		b_1660 = 1;
	v0 = prc_00A9();
	if (w_085A != 49)
		b_1660 = 2;
	prc_0159(250);
	UART_CR = 0x24180000 | d_1665;
	v0 = UART_DATA;
	UART_DATA = 232;
	v0 = prc_00A9();
	if (w_085A != 49)
		b_1660 = 3;
	TIMER_ENABLE = 0;
	b_165F = 0;
	return(w_085A);
}

proc prc_0467(a0, a1){
	var v2, v3;

	a1 = a1 << 8;
	for (v3 = 0; v3 < 8; v3++) {
		v2 = (a0 ^ a1) & 0x8000;
		if (v2)
			a0 = a0 << 1 ^ 0x1021;
		else
			a0 = a0 << 1;
		a1 = a1 << 1;
	}
	return(a0);
}

proc prc_04A6(){
	var v0, v1, v2;

	v2 = 0;
	for (v1 = 0; v1 != 512; v1++) {
		v0 = b_145c[v1];
		v2 = prc_0467(v2, v0);
	}
	return(v2);
}

proc prc_id3(){
	var v0, v1, v2;

	b_165F = 1;
	TIMER_ENABLE = 1;
	b_1660 = 0xFF;
	UART_DATA = 40;
	UART_DATA = b_165E;
	UART_DATA = b_165D;
	UART_DATA = b_165C;
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 3;
		b_165F = 0;
		return;
	}
	if (w_085A != 48) {
		b_1660 = 4;
		b_165F = 0;
		return;
	}
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 5;
		b_165F = 0;
		return;
	}
	if (w_085A != 49) {
		b_1660 = 6;
		b_165F = 0;
		return;
	}
	v0 = prc_010A();
	if (v0=0) {
		b_1660 = 7;
		b_165F = 0;
		return;
	}
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 8;
		b_165F = 0;
		return;
	}
	v2 = w_085A;
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 9;
		b_165F = 0;
		return;
	}
	v2 = v2 << 8 | w_085A;
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 10;
		b_165F = 0;
		return;
	}
	if (w_085A != 49) {
		b_1660 = 11;
		b_165F = 0;
		return;
	}
	v0 = prc_04A6();
	v0 = v0 & 0xFFFF;
	if (v0 != v2) {
		b_1660 = 16;
		b_165F = 0;
		return;
	}
	b_1660 = 0;
	TIMER_ENABLE = 0;
	b_165F = 0;
}

proc prc_id4(){
	var v0, v1, v2, v3;

	b_165F = 1;
	TIMER_ENABLE = 1;
	b_1660 = 0xFF;
	v0 = prc_04A6();
	v2 = v0 >> 8 & 0xFF;
	v3 = v0 & 0xFF;
	UART_DATA = 8;
	UART_DATA = b_165E;
	UART_DATA = b_165D;
	UART_DATA = b_165C;
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 32;
		b_165F = 0;
		return;
	}
	if (w_085A != 48) {
		b_1660 = 33;
		b_165F = 0;
		return;
	}
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 34;
		b_165F = 0;
		return;
	}
	if (w_085A != 49) {
		b_1660 = 35;
		b_165F = 0;
		return;
	}

	for (v1 = 0; v1 != 512; v1++)
		UART_DATA = b_145C[v1];

	UART_DATA = v2;
	UART_DATA = v3;
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 36;
		b_165F = 0;
		return;
	}
	if (w_085A != 48) {
		b_1660 = 37;
		b_165F = 0;
		return;
	}
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 38;
		b_165F = 0;
		return;
	}
	if (w_085A != 49) {
		b_1660 = 39;
		b_165F = 0;
		return;
	}
	b_1660 = 0;
	TIMER_ENABLE = 0;
	b_165F = 0;
}

proc prc_id5(){
	var v0;

	b_165F = 1;
	TIMER_ENABLE = 1;
	b_1660 = 0xFF;
	UART_DATA = 56;
	UART_DATA = b_165E;
	UART_DATA = b_165D;
	UART_DATA = b_165C;
	v0 = prc_00A9();
	if (v0=0) {
		b_1660 = 96;
		b_165F = 0;
		return;
	}
	if (w_085A != 48) {
		b_1660 = 97;
		b_165F = 0;
		return;
	}
	v0 = prc_00E1();
	if (v0=0) {
		b_1660 = 98;
		b_165F = 0;
		return;
	}
	if (w_085A != 49) {
		b_1660 = 99;
		b_165F = 0;
		return;
	}
	b_1660 = 0;
	TIMER_ENABLE = 0;
	b_165F = 0;
}

proc prc_id0(){
	PORTB &= 0x40 ^ 0xFF;
	UART_CR = 0;
}
